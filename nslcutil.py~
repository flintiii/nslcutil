#!/usr/bin/python
"""nclsutil.py

Usage:  nslcutil.py (-f | --2xlsx    ) <ifile> <ofile>
        nslcutil.py (-c | --testcsv  ) <ifile> <logfile>
        nslcutil.py (-x | --testxls  ) <ifile> <logfile>
        nslcutil.py (-s | --tespace  ) <ifile> <logfile>    
        nslcutil.py (-t | --testtab  ) <ifile> <logfile>
        nslcutil.py (-m | --transmit ) <ifile>
        nslcutil.py (-h | --details  )
        nslcutil.py --version

Options:
  -h --help     Show this screen.
  --version     Show version.

"""
import os
import re
import sys
import stat
import subprocess
import signal
import time
import io
import csv
import string
#W import openpyxl
from docopt import docopt
#
from subprocess import call
#
# Boilerplate imports for Python 2 / Python 3 mutual compatiibility
#
# from __future__ import print_function  # Make print a function
#W from six.moves  import input           # Use raw_input when I say input
from os.path    import expanduser      # Cross-platform home directory finder
#
# This slug is based upon the work of Kevin Cole... 
__author__     = "Flint"
__copyright__  = "Copyright 2016, Goddard College (02/01/2016)"
__credits__    = ["Flint"]  # Authors and bug reporters
__license__    = "GPL I"
__version__    = "0.078"
__maintainer__ = "Flint"
__email__      = "flint@flint.com"
__status__     = "Development"  # "Prototype", "Development" or "Production"
__appname__    = "NSLC file utililty"
#
# Load Globals
# global alfadefs
#
# Load landers
# Column for Excel Format Index 
length = 0 
start = 1 
stop = 2
reqd = 3
dtype = 4
fieldname = 6
count = 7
spreadsheet = "example.xlsx"
# csvfile = "example.csv"
csvfile = "bad.example.csv"
#
from nslcobjects import *

#################### Function Land ####################
#
def poplst():
    """
    Takes ordered directory objects and makes them into a global list of methods
    note the horror of synching this up requires a slug value alfafefs[0]
    """
    global alfadefs  #makes this dictionary global
    alfadefs = {'key':'value'}
    alfadefs[0] = {'key':'value'}
    key=1
    while key <= 109:
        value = dir(D1)[key-1]
        alfadefs[key] = "D1."+value+"()"
        key=key+1
    # test this with
    # eval(alfadefs[79]) 
    # len(eval(alfadefs[7]).split("," ))
    # print alfadefs[n]+"\t"+eval(alfadefs[n]) 
    # return eval(alfadefs[n]) 
    # return alfadefs[n] 
    # print alfadefs[n][3:-2]+"\t"+eval(alfadefs[n])
    # print (alfadefs[n][3:-2],eval(alfadefs[n])) 
    # return alfadefs[n] 
    # return eval(alfadefs[n])
    print " alfadefs is ready to go..."



def ccrider(file):
    """
    Takes one ordered directory object and compares it to an element in a line of input.
    """
    of = open(file, 'r')
    i = 1
    while True:
	line = of.readline()
	# EOF or 10blank line, stop...
	if line == '': break 
	print("{:0>2d} ".format(i))  + "  ",  #zero padded, fancy...
	mylist = line.split(',')
	if mylist[0]=="Record Type": line = of.readline() #skip header
	#D print line
	mylist = line.split(',')
	j=1  # record in line
	#D
	# print mylist[j]
	# print str(mylist[j]) 
	print "  "  + ssnok(str(mylist[j])),
	print "\t" + fname(str(mylist[j+1])),
	print "\t"  +  miok(str(mylist[j+2]))
	i += 1  # record number


def rrread(file,l,e):
    """
    Opens file, at line l at element e.
    returns string found at that position
    """
    print "entering rread"
    of = open(file, 'r')
    # print file
    line = of.readline()
    # print line
    mylist = line.split(',')
    print mylist
    if mylist[0]=="Record Type":
	print "l = "+l
	i=0
	# add insertion of an A3 record print alfadefs[n]+"\t"+eval(alfadefs[n])here
	while i < l: 			#advance to proper record
             line = of.readline()
	     print line
	     i=i+1

        mylist = line.split(',')
	print "hello " + mylist
	return str(mylist[e])


def rread(file,l,e):
	"""
	Opens file, at line l at element e.
	returns string found at that position
	"""
	e=e
	print "entering rread"
	of = open(file, 'r')
	# print file
	line = "0," + of.readline()
	line = "0," + of.readline()
	# print line
	mylist = line.split(',')
	print str(mylist)
	return str(mylist[e])

def geneval(n):
	"""
	This is a general purpose evaluator.  How it works is that it knows the following:
	Fieldname
	length
	start
	stop
	Required values "R", "O", or "C"
	Type
	It uses this information to check the current element and returns a pass/fail.
	"""
	# n=3
	e = 1
	csvfile = "fixed.example.csv" 
	status = " no decision, a bug"
	print rread(csvfile,e,n)
	element = rread(csvfile,e,n)
	# print elementelement.isdigit()
	# print alfadefs[n][6:-2]+"\t"+eval(alfadefs	[n])
	name = alfadefs[n][6:-2]
	# print "testing element number "+ str(n) + " as the " + name +"  "+ element
	criteria = eval(alfadefs[n]).split(',')
	# print element + "\t" + str(criteria)
	#
	# is it required?
	if criteria[3] == "O": 
		# print "Optional - Ignore"
		status = " OK"
	# is it a number of proper length?
	else:
		# print "Element is either a 'C' or an 'R'"	
		# note this version does not differentiate, just checks
		# uses a trinairy e.g. 'Yes' if fruit == 'Apple' else 'No'
		aoran = criteria[4].strip()
		print criteria
		print aoran+"\t"+element + "\t" + str(len(element)) + "\t" + str(int(criteria[0])) + "\t" + str(element.isdigit())
		# status = " Wrong!" if aoran ==  "N" and len(element) == int(criteria[0]) and element.isdigit() else " OK"
		# if aoran ==  "N": status = " OK"     if len(element) == int(criteria[0]) and element.isdigit() else " Wrong!"
		# if aoran ==  "N" and  element.isdigit() : status = " OK"  if len(element) == int(criteria[0]) else " Wrong!"
		if aoran ==  "N" and  element.isdigit(): status = "  n Wrong!" if len(element) != int(criteria[0]) else "  n OK"
		if aoran == "AN" and  element.isalpha(): status = " an Wrong!" if len(element) >= int(criteria[0]) else " an OK"
		if aoran ==  "A" and  element.isalpha(): status = "  a Wrong!" if len(element) >= int(criteria[0]) else "  a OK"
	# 
	#
	status = name + status
	# print status
	return status
		 

# load line
def csvln(file,n):
    """
    Tests an individual comma separated value line using D1 dlt class methods
    """
    #D print "Welcome to csvln!"
    of = open(file, 'r')
    line = of.readline()
    # print line
    mylist = line.split(',')
    if mylist[0]=="Record Type":
	# print n
	i=0
	# add insertion of an A3 record print alfadefs[n]+"\t"+eval(alfadefs[n])here
	while i < n: 			#advance to proper record
             line = of.readline()
	     # print line
	     i=i+1
        mylist = line.split(',')
	# print mylist
	j=1  # record in line
	SSN = mylist[j]
	#D print "SSN = " + SSN
	criteria = eval(alfadefs[j]).split(',')
	#D print "length " + criteria[0] 
	# print criteria[1]
    # test this with
    # eval(d[79]) 
    # len(eval(d[7]).split("," ))
    # print alfadefs[n]+"\t"+eval(alfadefs[n]) 
    # return eval(alfadefs[n]) 
    # return alfadefs[n] 
    # print alfadefs[n][3:-2]+"\t"+eval(alfadefs[n])
    # return alfadefs[n] 
    # return (alfadefs[n][3:-2],eval(alfadefs[n])) 
    # print alfadefs[j][3:-2]+"\t"+eval(alfadefs[j])
    # criteria = eval(alfadefs[j]).split("," )
    # Conditions
    # print "Required = " + criteria[3]
    #D if   criteria[3] == 'R': print " - Required"
    #D elif criteria[3] == 'O': print " - Optional"
    #D elif criteria[3] == 'C': print " - Conditional"
    #D else: print "error"
    #
    # Conditions
    # print "Type     = " + criteria[4]
    #D if   criteria[4] == 'A' : 
    #D 	print " - Alpha"
    #D  print "abc".isalpha()
    #D print criteria[4].isalpha()
    #D elif criteria[4] == 'N' : 
    #D print " - Numeric"
    #D  print "123".isdigit()
    #D print criteria[4].isdigit()
    #D elif criteria[4] == 'AN': print " - Alpha Numeric"
    # print "1bc".isalnum()
    #D else: print "error"
    #
    #D print "Length   = " + criteria[0]
    #D print "Start    = " + criteria[1]
    #D print "Stop     = " + criteria[2]
    #
    #D print "Column Alpha = " + criteria[6]
    #D print "Column Numbr = " + criteria[7]

    print "SSN numeric? " + str(SSN.isdigit()),
    # print len(SSN) 
    if len(SSN) != int(criteria[0]): print "\tSSN Wrong!"
    else:
	print "\tSSN OK!"



def csvlt(file):
    """
    Tests an individual comma separated value line using D1 dlt class methods
    """
    print "Welcome to csvlt!"
    of = open(file, 'r')
    line = of.readline()
    # print line
    mylist = line.split(',')
    if mylist[0]=="Record Type":
	# add insertion of an A3 record here
        line = of.readline()
        mylist = line.split(',')
        print mylist[1]
        print alfadefs[1]
        criteria = eval(alfadefs[1]).split(',')
        print criteria[0]
        print criteria[1]

if __name__ == '__main__':
    args = docopt(__doc__, version=__file__ +" " + __version__ )
    #D  print(args)


#
#################### Menu Land ####################
#

if args['--2xlsx'] or args['-f']:
    print "You are at the 2xlsx routine -"
    print args['<ifile>']+"  " + args['<ofile>']
    print "This routine is not yet operational"
elif args['--testxls'] or args['-x']:
    print "You are at the testxls routine -"
    print args['<ifile>']+"  " + args['<logfile>']
    print "This routine is not yet operational"
elif args['--testcsv'] or args['-c']:
    print "You are at the testcsv routine -"
    print "This routine is not yet operational but is used for testing"
    #T 
    poplst()
    csvlt(csvfile)
    print args['<ifile>']+"  " + args['<logfile>']
elif args['--testtab'] or args['-t']:
    print "You are at the testtab routine -"
    print args['<ifile>']+"  " + args['<logfile>']
    print "This routine is not yet operational but is used for testing"
    #T
    n=2
    poplst()
    print alfadefs[n]
    print alfadefs[n]+"\t"+eval(alfadefs[n])
elif args['--tespace'] or args['-s']:
    print "You are at the tespace routine -"
    print args['<ifile>']+"  " + args['<logfile>']
    print "This routine is not yet operational"
elif args['--transmit'] or args['-m']:
    print "You are at the transmit routine -"
    print args['<ifile>']
elif args['--details']:
    os.system('cls' if os.name == 'nt' else 'clear')
    print "You are at the detail routine -"
    ''' Prints the main story about this program.'''
    print "\tWelcome to the "+__appname__+" Version: "+__version__  
    print 'This is %s documentation: A general tool for NSLC support' %  os.path.basename(__file__)
    print 'This tool is currently in the %s stage, at version %s' % (__status__, __version__)
    print 'This code, produced by %s, is a work product produced for hire. It is' % __maintainer__
    print '%s, and licensed under the %s ' % ( __copyright__, __license__ )
    print "for operating this tool see commands below:"
    print "Summary usage is:"
    print "\t %s -h" % __file__
    print "Detailed Usage:"  
    print "\t%s  -f  or  --2xlsx    <ifile> <ofile>" %__file__
    print "   Converts CSV output of Goddard SIS NSLC to a Microsoft Excel XLSX format."  
    print "\t%s   -c  or  --testcsv  <ifile> <logfile>" %__file__
    print "   Tests the CSV output of Goddard SIS NSLC to conform with NSLC requirements."  
    print "\t%s   -x  or  --testxls  <ifile> <logfile>" %__file__
    print "   Tests if a Microsoft Excel XLSX format file conforms with NSLC requirements."  
    print "\t%s   -t  or  --testtab  <ifile> <logfile>" %__file__
    print "   Tests if a TAB seperated file conforms with NSLC requirements." 
    print "\t%s   -s  or  --tespace  <ifile> <logfile>" %__file__
    print "   Tests if a fixed field file conforms with NSLC requirements."  
    print "\t%s   -m  or  --transmit ) <ifile>" %__file__
    print "   Transmitts <infile> to the NSLC destination."  
    print "Where:"
    print "\t'<ifile>' & '<ofile>' are required as fully pathed filenames."
    print "\t'<logfile>' is optional, and defaults to standard output."

